{"version":3,"sources":["bg-main.js"],"names":["AMOUNTY","container","count","particle","renderer","THREE","WebGLRenderer","SEPARATION","AMOUNTX","windowHalfY","window","innerHeight","document","createElement","className","camera","PerspectiveCamera","innerWidth","position","z","scene","rotation","Scene","Math","color","Array","program","PI","context","beginPath","SpriteCanvasMaterial","i","arc","PI2","fill","ix","setSize","iy","appendChild","domElement","Sprite","material","addEventListener","add","setClearColor","animate","render","onWindowResize","windowHalfX","requestAnimationFrame","particles","y","sin","scale","x","init"],"mappings":"aAEA,IAeoCA,UAEhCC,OAUqBC,UAAzBC,SA3BAC,SAAA,IAAAC,MAAAC,cAEIF,MAAQ,IAAGC,MAAIA,MAafE,WAAa,GAAjBC,QAAA,IAAAR,QAAA,GAYAE,MAAA,EAGIO,YAAcC,OAAOC,WAAP,EAEdF,YAAAC,OAAAC,YAAA,EAMFC,SAAAA,OACAX,UAAGA,SAAWY,cAAA,OACVZ,SAAAA,KAAUa,YAAab,WAC1BA,YADGA,UAAUa,WAAab,UAAUa,UAAY,SAAW,UAG5DC,OAAS,IAAIV,MAAMW,kBAAmB,IAAKN,OAAOO,WAAaP,OAAOC,YAAa,EAAG,MAE/EO,SAASC,EAAI,IAApBJ,OAAOG,SAASC,EAAI,IAIpBC,OAAKC,SAAOhB,EAAMiB,IAIlBF,MAAO,IAAGG,MAAAD,MAGRE,UAAO,IAAAC,MAaT,IAZEC,IAAAA,EAAS,EAAFH,KAAEI,GAEPC,EAAQC,IAAAA,MAARC,qBAAA,CAEAF,MAAAA,QAEDF,QAAA,SAAAE,GAICG,EAAJF,YAPID,EAAQI,IAAK,EAAG,EAAG,GAAK,EAAGC,GAAK,GASpCL,EAAYM,UASTH,EAAA,EATOI,EAAK,EAAGA,EAAK3B,QAAS2B,IAchC/B,IAAQ,IAACgC,EAAS1B,EAAAA,EAAOO,QAAzBoB,KAEApC,SAAUqC,UAAalC,KAASmC,IAAAA,MAAhCC,OAAAC,IAEOC,SAAAA,EAAkBP,EAAA5B,WAAzBC,QAAAD,WAAA,EAEDJ,SAAAe,SAAAC,EAAAkB,EAAA9B,YAAAP,QAAAO,WAAA,IAbKa,MAAMuB,IAAKxC,WAuBfC,SAASgC,IAAAA,MAAS1B,gBAEnB0B,QAAA1B,OAAAO,WAAAP,OAAAC,aAjBCP,SAASwC,cAAe,SAAU,GAmBpC3C,UAAS4C,YAAUzC,SAAAmC,YAIjBO,OAAMJ,iBAAA,SAAAK,gBAAA,GAMN,SAAKA,iBAELC,YAAetC,OAAKO,WAAc,EAEhCR,YAAYC,OAAQC,YAAc,EAGhCR,OAAAA,OAASe,OAATD,WAAoCkB,OAAKjC,YACzCC,OAAAA,yBAIHC,SAAAgC,QAAA1B,OAAAO,WAAAP,OAAAC,aAKDT,SAAK2C,UAzBLI,sBAAuBJ,SAEvBC,SAIF,SAASA,SAIP,IAFA,IAAIf,EAAI,EAEEI,EAAK,EAAGA,EAAK3B,QAAS2B,IAE9B,IAAM,IAAIE,EAAK,EAAGA,EAAKrC,QAASqC,KAE9BlC,SAAW+C,UAAWnB,MACbb,SAASiC,EAAyC,GAAnC5B,KAAK6B,IAAsB,IAAfjB,EAAKjC,QAA8D,GAAnCqB,KAAK6B,IAAsB,IAAff,EAAKnC,QACrFC,SAASkD,MAAMC,EAAInD,SAASkD,MAAMF,EAA+C,GAAzC5B,KAAK6B,IAAsB,IAAfjB,EAAKjC,QAAkB,GAAqD,GAAzCqB,KAAK6B,IAAsB,IAAff,EAAKnC,QAAkB,GAM9HE,SAAS0C,OAAQ1B,MAAOL,QAGxBb,OAAS,GAlGXqD,OAGAV","file":"../bg-main.js","sourcesContent":["// Option 1: Import the entire three.js core library.\r\n// import * as THREE from 'three';\r\n// const scene = new THREE.Scene();\r\n\r\nvar renderer = new THREE.WebGLRenderer();\r\nvar scene = new THREE.Scene();\r\n\r\n/* \r\n\r\nThreeJs custom waves\r\nOriginal script by ThreeJS : https://threejs.org/examples/canvas_particles_waves.html\r\nModified version for Cloudoru by Kevin Rajaram : http://kevinrajaram.com\r\nDate: 08/14/2014\r\n\r\n\r\n*/\r\n\r\nvar SEPARATION = 40, AMOUNTX = 130, AMOUNTY = 35;\r\n\r\nvar container;\r\nvar camera, scene, renderer;\r\n\r\n\r\n// if (window.WebGLRenderingContext) {\r\n//   renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\r\n// } else {\r\n//   renderer = new THREE.CanvasRenderer();\r\n// }\r\n\r\nvar particles, particle, count = 0;\r\n\r\nvar windowHalfX = window.innerWidth / 2;\r\nvar windowHalfY = window.innerHeight / 2;\r\n\r\ninit();\r\nanimate();\r\n\r\nfunction init() {\r\n\r\n  container = document.createElement( 'div' );\r\n  document.body.appendChild( container );\r\n  if(container) {\r\n      container.className += container.className ? ' waves' : 'waves';\r\n  }\r\n\r\n  camera = new THREE.PerspectiveCamera( 120, window.innerWidth / window.innerHeight, 1, 10000 );\r\n  camera.position.y = 150; //changes how far back you can see i.e the particles towards horizon\r\n  camera.position.z = 300; //This is how close or far the particles are seen\r\n  \r\n  camera.rotation.x = 0.35;\r\n  \r\n  scene = new THREE.Scene();\r\n\r\n  particles = new Array();\r\n\r\n  var PI2 = Math.PI * 2;\r\n  var material = new THREE.SpriteCanvasMaterial( {\r\n\r\n    color: 0x939393, //changes color of particles\r\n    program: function ( context ) {\r\n\r\n      context.beginPath();\r\n      context.arc( 0, 0, 0.1, 0, PI2, true );\r\n      context.fill();\r\n\r\n    }\r\n\r\n  } );\r\n\r\n  var i = 0;\r\n\r\n  for ( var ix = 0; ix < AMOUNTX; ix ++ ) {\r\n\r\n    for ( var iy = 0; iy < AMOUNTY; iy ++ ) {\r\n\r\n      particle = particles[ i ++ ] = new THREE.Sprite( material );\r\n      particle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );\r\n      particle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) - 10 );\r\n      scene.add( particle );\r\n\r\n    }\r\n\r\n  }\r\n\r\n  renderer = new THREE.CanvasRenderer();\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  renderer.setClearColor( 0xffffff, 1);\r\n  container.appendChild( renderer.domElement );\r\n\r\n  window.addEventListener( 'resize', onWindowResize, false );\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n  windowHalfX = window.innerWidth / 2;\r\n  windowHalfY = window.innerHeight / 2;\r\n\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n}\r\n\r\nfunction animate() {\r\n\r\n  requestAnimationFrame( animate );\r\n\r\n  render();\r\n\r\n}\r\n\r\nfunction render() {\r\n\r\n  var i = 0;\r\n\r\n  for ( var ix = 0; ix < AMOUNTX; ix ++ ) {\r\n\r\n    for ( var iy = 0; iy < AMOUNTY; iy ++ ) {\r\n\r\n      particle = particles[ i++ ];\r\n      particle.position.y = ( Math.sin( ( ix + count ) * 0.5 ) * 20 ) + ( Math.sin( ( iy + count ) * 0.5 ) * 20 );\r\n      particle.scale.x = particle.scale.y = ( Math.sin( ( ix + count ) * 0.3 ) + 2 ) * 4 + ( Math.sin( ( iy + count ) * 0.5 ) + 1 ) * 4;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  renderer.render( scene, camera );\r\n\r\n  // This increases or decreases speed\r\n  count += 0.2;\r\n\r\n}\r\n"]}